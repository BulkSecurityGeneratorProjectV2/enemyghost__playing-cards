/*
 * This file is generated by jOOQ.
*/
package com.gmo.big2.store.mysql.schema.jooq.tables;


import com.gmo.big2.store.mysql.schema.jooq.BigTwo;
import com.gmo.big2.store.mysql.schema.jooq.Indexes;
import com.gmo.big2.store.mysql.schema.jooq.Keys;
import com.gmo.big2.store.mysql.schema.jooq.tables.records.PlayerGroupRecord;
import com.gmo.big2.store.mysql.support.UUIDBinaryConverter;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlayerGroup extends TableImpl<PlayerGroupRecord> {

    private static final long serialVersionUID = 454917654;

    /**
     * The reference instance of <code>big_two.player_group</code>
     */
    public static final PlayerGroup PLAYER_GROUP = new PlayerGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayerGroupRecord> getRecordType() {
        return PlayerGroupRecord.class;
    }

    /**
     * The column <code>big_two.player_group.player_group_uuid</code>.
     */
    public final TableField<PlayerGroupRecord, UUID> PLAYER_GROUP_UUID = createField("player_group_uuid", org.jooq.impl.SQLDataType.BINARY(16).nullable(false), this, "", new UUIDBinaryConverter());

    /**
     * The column <code>big_two.player_group.player_uuid_1</code>.
     */
    public final TableField<PlayerGroupRecord, UUID> PLAYER_UUID_1 = createField("player_uuid_1", org.jooq.impl.SQLDataType.BINARY(16).nullable(false), this, "", new UUIDBinaryConverter());

    /**
     * The column <code>big_two.player_group.player_uuid_2</code>.
     */
    public final TableField<PlayerGroupRecord, UUID> PLAYER_UUID_2 = createField("player_uuid_2", org.jooq.impl.SQLDataType.BINARY(16).nullable(false), this, "", new UUIDBinaryConverter());

    /**
     * The column <code>big_two.player_group.player_uuid_3</code>.
     */
    public final TableField<PlayerGroupRecord, UUID> PLAYER_UUID_3 = createField("player_uuid_3", org.jooq.impl.SQLDataType.BINARY(16), this, "", new UUIDBinaryConverter());

    /**
     * The column <code>big_two.player_group.player_uuid_4</code>.
     */
    public final TableField<PlayerGroupRecord, UUID> PLAYER_UUID_4 = createField("player_uuid_4", org.jooq.impl.SQLDataType.BINARY(16), this, "", new UUIDBinaryConverter());

    /**
     * Create a <code>big_two.player_group</code> table reference
     */
    public PlayerGroup() {
        this(DSL.name("player_group"), null);
    }

    /**
     * Create an aliased <code>big_two.player_group</code> table reference
     */
    public PlayerGroup(String alias) {
        this(DSL.name(alias), PLAYER_GROUP);
    }

    /**
     * Create an aliased <code>big_two.player_group</code> table reference
     */
    public PlayerGroup(Name alias) {
        this(alias, PLAYER_GROUP);
    }

    private PlayerGroup(Name alias, Table<PlayerGroupRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlayerGroup(Name alias, Table<PlayerGroupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BigTwo.BIG_TWO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PLAYER_GROUP_PLAYER_GROUP_PLAYER1_FK, Indexes.PLAYER_GROUP_PLAYER_GROUP_PLAYER2_FK, Indexes.PLAYER_GROUP_PLAYER_GROUP_PLAYER3_FK, Indexes.PLAYER_GROUP_PLAYER_GROUP_PLAYER4_FK, Indexes.PLAYER_GROUP_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PlayerGroupRecord> getPrimaryKey() {
        return Keys.KEY_PLAYER_GROUP_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PlayerGroupRecord>> getKeys() {
        return Arrays.<UniqueKey<PlayerGroupRecord>>asList(Keys.KEY_PLAYER_GROUP_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PlayerGroupRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PlayerGroupRecord, ?>>asList(Keys.PLAYER_GROUP_PLAYER1_FK, Keys.PLAYER_GROUP_PLAYER2_FK, Keys.PLAYER_GROUP_PLAYER3_FK, Keys.PLAYER_GROUP_PLAYER4_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PlayerGroup as(String alias) {
        return new PlayerGroup(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PlayerGroup as(Name alias) {
        return new PlayerGroup(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerGroup rename(String name) {
        return new PlayerGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerGroup rename(Name name) {
        return new PlayerGroup(name, null);
    }
}
