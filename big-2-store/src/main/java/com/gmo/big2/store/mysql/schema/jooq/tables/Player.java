/*
 * This file is generated by jOOQ.
*/
package com.gmo.big2.store.mysql.schema.jooq.tables;


import com.gmo.big2.store.mysql.schema.jooq.BigTwo;
import com.gmo.big2.store.mysql.schema.jooq.Indexes;
import com.gmo.big2.store.mysql.schema.jooq.Keys;
import com.gmo.big2.store.mysql.schema.jooq.tables.records.PlayerRecord;
import com.gmo.big2.store.mysql.support.UUIDBinaryConverter;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Player extends TableImpl<PlayerRecord> {

    private static final long serialVersionUID = 439777181;

    /**
     * The reference instance of <code>big_two.player</code>
     */
    public static final Player PLAYER = new Player();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayerRecord> getRecordType() {
        return PlayerRecord.class;
    }

    /**
     * The column <code>big_two.player.player_uuid</code>.
     */
    public final TableField<PlayerRecord, UUID> PLAYER_UUID = createField("player_uuid", org.jooq.impl.SQLDataType.BINARY(16).nullable(false), this, "", new UUIDBinaryConverter());

    /**
     * The column <code>big_two.player.email_address</code>.
     */
    public final TableField<PlayerRecord, String> EMAIL_ADDRESS = createField("email_address", org.jooq.impl.SQLDataType.VARCHAR(320).nullable(false), this, "");

    /**
     * The column <code>big_two.player.display_name</code>.
     */
    public final TableField<PlayerRecord, String> DISPLAY_NAME = createField("display_name", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>big_two.player.password_hash</code>.
     */
    public final TableField<PlayerRecord, byte[]> PASSWORD_HASH = createField("password_hash", org.jooq.impl.SQLDataType.VARBINARY(256).nullable(false), this, "");

    /**
     * Create a <code>big_two.player</code> table reference
     */
    public Player() {
        this(DSL.name("player"), null);
    }

    /**
     * Create an aliased <code>big_two.player</code> table reference
     */
    public Player(String alias) {
        this(DSL.name(alias), PLAYER);
    }

    /**
     * Create an aliased <code>big_two.player</code> table reference
     */
    public Player(Name alias) {
        this(alias, PLAYER);
    }

    private Player(Name alias, Table<PlayerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Player(Name alias, Table<PlayerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BigTwo.BIG_TWO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PLAYER_DISPLAY_NAME, Indexes.PLAYER_EMAIL_ADDRESS, Indexes.PLAYER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PlayerRecord> getPrimaryKey() {
        return Keys.KEY_PLAYER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PlayerRecord>> getKeys() {
        return Arrays.<UniqueKey<PlayerRecord>>asList(Keys.KEY_PLAYER_PRIMARY, Keys.KEY_PLAYER_EMAIL_ADDRESS, Keys.KEY_PLAYER_DISPLAY_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Player as(String alias) {
        return new Player(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Player as(Name alias) {
        return new Player(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Player rename(String name) {
        return new Player(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Player rename(Name name) {
        return new Player(name, null);
    }
}
