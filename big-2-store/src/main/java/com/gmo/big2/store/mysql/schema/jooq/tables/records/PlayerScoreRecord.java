/*
 * This file is generated by jOOQ.
*/
package com.gmo.big2.store.mysql.schema.jooq.tables.records;


import com.gmo.big2.store.mysql.schema.jooq.tables.PlayerScore;

import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlayerScoreRecord extends UpdatableRecordImpl<PlayerScoreRecord> implements Record2<UUID, Integer> {

    private static final long serialVersionUID = -1353012061;

    /**
     * Setter for <code>big_two.player_score.player_uuid</code>.
     */
    public PlayerScoreRecord setPlayerUuid(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>big_two.player_score.player_uuid</code>.
     */
    public UUID getPlayerUuid() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>big_two.player_score.score</code>.
     */
    public PlayerScoreRecord setScore(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>big_two.player_score.score</code>.
     */
    public Integer getScore() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<UUID, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<UUID, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UUID> field1() {
        return PlayerScore.PLAYER_SCORE.PLAYER_UUID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return PlayerScore.PLAYER_SCORE.SCORE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UUID component1() {
        return getPlayerUuid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component2() {
        return getScore();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UUID value1() {
        return getPlayerUuid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getScore();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PlayerScoreRecord value1(UUID value) {
        setPlayerUuid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PlayerScoreRecord value2(Integer value) {
        setScore(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PlayerScoreRecord values(UUID value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PlayerScoreRecord
     */
    public PlayerScoreRecord() {
        super(PlayerScore.PLAYER_SCORE);
    }

    /**
     * Create a detached, initialised PlayerScoreRecord
     */
    public PlayerScoreRecord(UUID playerUuid, Integer score) {
        super(PlayerScore.PLAYER_SCORE);

        set(0, playerUuid);
        set(1, score);
    }
}
